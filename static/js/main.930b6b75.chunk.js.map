{"version":3,"sources":["components/Location.js","components/Icon.js","components/Temperature.js","components/Condition.js","components/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["Location","city","country","Local","styled","div","City","Country","Icon","props","img","icon","condition","src","alt","Temperature","temp","Temp","Condition","Condt","WeatherCard","highcolor","lowcolor","bg","Card","App","useState","setCity","setTemp","setCondition","setCountry","data","a","fetch","apiRes","json","resJSON","useEffect","then","res","main","weather","sys","className","id","value","onChange","e","target","class","onClick","preventDefault","handleSearch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.930b6b75.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport styled from '@emotion/styled';\r\n\r\nconst Location = ({city,country}) => {\r\n   \r\n    const Local  =styled.div`\r\n      \r\n        padding-top: 10px;\r\n      \r\n    `\r\n    const City  =styled.div`\r\n    \r\n    font-family: Georgia, 'Times New Roman', Times, serif;\r\n    font-size: 1.6em;\r\n    font-weight:bolder;\r\n  \r\n    `\r\n    const Country  =styled.div`\r\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n    font-size: 1.1rem;\r\n    `\r\n    return ( \r\n        <Local>\r\n                <City>{city}</City>\r\n                <Country>{country}</Country>\r\n        </Local>\r\n     );\r\n}\r\n \r\nexport default Location;","import React from 'react';\r\n\r\nimport styled from '@emotion/styled';\r\n\r\nconst Icon = (props) => {\r\n    const Icon = styled.img`\r\n     \r\n    `\r\n    var icon=''\r\n    switch (props.condition) {\r\n        case \"Clouds\":\r\n          icon = `./img/Mostly Cloudy-2x.png`;\r\n          break;\r\n        case \"Clear\":\r\n          icon = `./img/Mostly Sunny-2x.png`;\r\n          break;\r\n        case \"Haze\":\r\n          icon = `./img/Haze-2x.png`;\r\n          break;\r\n        case \"Hail\":\r\n          icon = `./img/Hail-2x.png`;\r\n          break;\r\n        case \"Fog\":\r\n          icon = `./img/Fog-2x.png`;\r\n          break;\r\n        case \"Tornado\":\r\n          icon = `./img/Tornado-2x.png`;\r\n          break;\r\n        case \"Dust\":\r\n          icon = `./img/Dust-2x.png`;\r\n          break;\r\n        case \"Mist\":\r\n          icon = `./img/Fog-2x.png`;\r\n          break;\r\n        case \"Snow\":\r\n          icon = `./img/Snow-2x.png`;\r\n          break;\r\n        case \"Rain\":\r\n          icon = `./img/Rain-2x.png`;\r\n          break;\r\n        case \"Drizzle\":\r\n          icon = `./img/Drizzle-2x.png`;\r\n          break;\r\n        case \"Thunderstorm\":\r\n          icon = `./img/Severe Thunderstorm-2x.png`;\r\n          break;\r\n        default:\r\n          icon = `./img/Fog-2x.png`;\r\n          break;\r\n      }\r\n    return ( \r\n        <Icon  src={icon} alt='Weather Icon'></Icon>\r\n        \r\n     );\r\n}\r\n \r\nexport default Icon;","import React from 'react';\r\n\r\nimport styled from '@emotion/styled';\r\n\r\nconst Temperature = ({temp}) => {\r\n    const Temp = styled.div`\r\n    \r\n        font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\r\n        font-size: 2rem;\r\n    \r\n    `\r\n    return ( \r\n            \r\n                <Temp>{temp}Â°C</Temp>\r\n        \r\n     );\r\n}\r\n \r\nexport default Temperature;","import React from 'react';\r\n\r\nimport styled from '@emotion/styled';\r\n\r\nconst Condition = ({condition}) => {\r\n    const Condt = styled.div`\r\n    \r\n        font-size: 1.2rem;\r\n        padding-bottom:15px;\r\n    \r\n    `\r\n    return ( \r\n       \r\n    <Condt>{condition}</Condt>\r\n        \r\n     );\r\n}\r\n \r\nexport default Condition;","import React from 'react';\r\n\r\nimport styled from '@emotion/styled';\r\nimport Location from './Location';\r\nimport Icon from './Icon';\r\nimport Temperature from './Temperature';\r\nimport Condition from './Condition';\r\n\r\n\r\nconst WeatherCard = ({temp,condition,city,country}) => { \r\n    let highcolor = 0;\r\n    let lowcolor = 0; \r\n    let bg=null;\r\n   if(temp>12){ //gor hot weather\r\n     highcolor = (1-((temp-12)/28))*255;\r\n     lowcolor = highcolor-150;\r\n     bg=`linear-gradient(\r\n        to top,\r\n        rgb(255,${highcolor},0),\r\n         rgb(255,${lowcolor},0)\r\n    );`\r\n    \r\n   }\r\n   else if(temp<=12){  //for cold weather\r\n     highcolor = (1-((temp+20)/32))*255;\r\n     lowcolor = highcolor-150;\r\n     bg=`\r\n     linear-gradient(\r\n        to top,\r\n        rgb(0,${highcolor},255),\r\n         rgb(0,${lowcolor},255)\r\n    );\r\n    `\r\n   }\r\n    const Card =styled.div`\r\n    margin: 0 auto;\r\n    background: ${bg};\r\n    color: white;\r\n    width: 200px;\r\n    height: 260px;\r\n    display: inline-flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    \r\n    border-radius: 25px;\r\n    text-align: center;\r\n    `\r\n    return ( \r\n        <Card >\r\n            \r\n            <Location city={city} country={country}/>\r\n            <Icon condition={condition}/>\r\n            <Temperature temp={temp}/>\r\n            <Condition condition={condition}/>\r\n           \r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default WeatherCard;","import React,{useEffect , useState} from 'react';\n\nimport WeatherCard from './components/WeatherCard';\nimport './App.css';\n\nfunction App() {\n  const[city,setCity]=useState('Delhi');\n  const[temp,setTemp]=useState('');\n  const[condition,setCondition]=useState('');\n  const[country,setCountry]=useState('');\n  const data= async()=>{\n    const apiRes = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&APPID=6930891197bfc4266ba6b989393f57be`\n      );\n      const resJSON= await apiRes.json();\n      return resJSON;\n  };\n  \n  const handleSearch=(e)=>{\n    e.preventDefault();\n    data().then(res=> {\n      setTemp(res.main.temp);\n      setCondition(res.weather[0].main);\n      setCountry(res.sys.country);\n    });\n  };\n  useEffect(()=>{\n    data().then(res=> {\n      setTemp(res.main.temp);\n      setCondition(res.weather[0].main);\n      setCountry(res.sys.country);\n    });\n  },[]);\n  return (\n    <div>\n    <div className=\"App\">\n    <WeatherCard temp={temp} condition={condition} city={city} country={country}/><br></br>\n    \n   <from>\n     <input \n     id='search'\n     value={city} onChange={(e)=>setCity(e.target.value)}\n     /><br></br>\n     <button class='btn btn-full' onClick={e=>handleSearch(e )}>search</button>\n   </from>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}